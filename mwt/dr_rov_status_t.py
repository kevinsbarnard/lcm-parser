"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mwt.header_t

class dr_rov_status_t(object):
    __slots__ = ["header", "uptime_sec", "tx_err_cnt", "rx_err_cnt", "rx_connected", "x_cmd", "y_cmd", "z_cmd", "yaw_cmd", "obs_scale", "roll_deg", "pitch_deg", "yaw_deg", "depth_meters", "alt_meters", "auto_nav", "obs_mode", "rev_thrust", "ext_ctrl", "v_lock", "reduced_pwr", "belly_ctrl", "h_lock", "primary_hdg", "primary_alt", "e_pwr_limit", "auto_head", "auto_depth", "auto_alt"]

    __typenames__ = ["mwt.header_t", "double", "int64_t", "int64_t", "boolean", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "boolean", "boolean", "boolean", "boolean", "boolean", "boolean", "boolean", "boolean", "boolean", "boolean", "boolean", "boolean", "boolean", "boolean"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.header = mwt.header_t()
        self.uptime_sec = 0.0
        self.tx_err_cnt = 0
        self.rx_err_cnt = 0
        self.rx_connected = False
        self.x_cmd = 0.0
        self.y_cmd = 0.0
        self.z_cmd = 0.0
        self.yaw_cmd = 0.0
        self.obs_scale = 0.0
        self.roll_deg = 0.0
        self.pitch_deg = 0.0
        self.yaw_deg = 0.0
        self.depth_meters = 0.0
        self.alt_meters = 0.0
        self.auto_nav = False
        self.obs_mode = False
        self.rev_thrust = False
        self.ext_ctrl = False
        self.v_lock = False
        self.reduced_pwr = False
        self.belly_ctrl = False
        self.h_lock = False
        self.primary_hdg = False
        self.primary_alt = False
        self.e_pwr_limit = False
        self.auto_head = False
        self.auto_depth = False
        self.auto_alt = False

    def encode(self):
        buf = BytesIO()
        buf.write(dr_rov_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == mwt.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">dqqbddddddddddbbbbbbbbbbbbbb", self.uptime_sec, self.tx_err_cnt, self.rx_err_cnt, self.rx_connected, self.x_cmd, self.y_cmd, self.z_cmd, self.yaw_cmd, self.obs_scale, self.roll_deg, self.pitch_deg, self.yaw_deg, self.depth_meters, self.alt_meters, self.auto_nav, self.obs_mode, self.rev_thrust, self.ext_ctrl, self.v_lock, self.reduced_pwr, self.belly_ctrl, self.h_lock, self.primary_hdg, self.primary_alt, self.e_pwr_limit, self.auto_head, self.auto_depth, self.auto_alt))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != dr_rov_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return dr_rov_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = dr_rov_status_t()
        self.header = mwt.header_t._decode_one(buf)
        self.uptime_sec, self.tx_err_cnt, self.rx_err_cnt = struct.unpack(">dqq", buf.read(24))
        self.rx_connected = bool(struct.unpack('b', buf.read(1))[0])
        self.x_cmd, self.y_cmd, self.z_cmd, self.yaw_cmd, self.obs_scale, self.roll_deg, self.pitch_deg, self.yaw_deg, self.depth_meters, self.alt_meters = struct.unpack(">dddddddddd", buf.read(80))
        self.auto_nav = bool(struct.unpack('b', buf.read(1))[0])
        self.obs_mode = bool(struct.unpack('b', buf.read(1))[0])
        self.rev_thrust = bool(struct.unpack('b', buf.read(1))[0])
        self.ext_ctrl = bool(struct.unpack('b', buf.read(1))[0])
        self.v_lock = bool(struct.unpack('b', buf.read(1))[0])
        self.reduced_pwr = bool(struct.unpack('b', buf.read(1))[0])
        self.belly_ctrl = bool(struct.unpack('b', buf.read(1))[0])
        self.h_lock = bool(struct.unpack('b', buf.read(1))[0])
        self.primary_hdg = bool(struct.unpack('b', buf.read(1))[0])
        self.primary_alt = bool(struct.unpack('b', buf.read(1))[0])
        self.e_pwr_limit = bool(struct.unpack('b', buf.read(1))[0])
        self.auto_head = bool(struct.unpack('b', buf.read(1))[0])
        self.auto_depth = bool(struct.unpack('b', buf.read(1))[0])
        self.auto_alt = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if dr_rov_status_t in parents: return 0
        newparents = parents + [dr_rov_status_t]
        tmphash = (0x8d252285972e3279+ mwt.header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if dr_rov_status_t._packed_fingerprint is None:
            dr_rov_status_t._packed_fingerprint = struct.pack(">Q", dr_rov_status_t._get_hash_recursive([]))
        return dr_rov_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

