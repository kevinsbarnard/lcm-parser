"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class gps_status_t(object):
    __slots__ = ["utc_time_secs", "position_fix_ind", "satellites_used", "hdop", "undulation_m", "diff_correction_age_s", "diff_station_id"]

    __typenames__ = ["double", "int16_t", "int16_t", "double", "double", "double", "int16_t"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.utc_time_secs = 0.0
        self.position_fix_ind = 0
        self.satellites_used = 0
        self.hdop = 0.0
        self.undulation_m = 0.0
        self.diff_correction_age_s = 0.0
        self.diff_station_id = 0

    def encode(self):
        buf = BytesIO()
        buf.write(gps_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dhhdddh", self.utc_time_secs, self.position_fix_ind, self.satellites_used, self.hdop, self.undulation_m, self.diff_correction_age_s, self.diff_station_id))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != gps_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return gps_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = gps_status_t()
        self.utc_time_secs, self.position_fix_ind, self.satellites_used, self.hdop, self.undulation_m, self.diff_correction_age_s, self.diff_station_id = struct.unpack(">dhhdddh", buf.read(38))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if gps_status_t in parents: return 0
        tmphash = (0xf26f741884a2911d) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if gps_status_t._packed_fingerprint is None:
            gps_status_t._packed_fingerprint = struct.pack(">Q", gps_status_t._get_hash_recursive([]))
        return gps_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", gps_status_t._get_packed_fingerprint())[0]

