"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class stereo_image_t(object):
    __slots__ = ["publisher", "cam1_timestamp", "cam2_timestamp", "left_utime", "right_utime", "sequence", "camera_orientation", "width", "height", "row_stride", "pixelformat", "size", "data"]

    CAM_HORIZONTAL = 1
    CAM_VERTICAL = 2
    PIXEL_FORMAT_UYVY = 1498831189
    PIXEL_FORMAT_YUYV = 1448695129
    PIXEL_FORMAT_IYU1 = 827677001
    PIXEL_FORMAT_IYU2 = 844454217
    PIXEL_FORMAT_YUV420 = 842093913
    PIXEL_FORMAT_YUV411P = 1345401140
    PIXEL_FORMAT_I420 = 808596553
    PIXEL_FORMAT_NV12 = 842094158
    PIXEL_FORMAT_GRAY = 1497715271
    PIXEL_FORMAT_RGB = 859981650
    PIXEL_FORMAT_BGR = 861030210
    PIXEL_FORMAT_RGBA = 876758866
    PIXEL_FORMAT_BGRA = 877807426
    PIXEL_FORMAT_BAYER_BGGR = 825770306
    PIXEL_FORMAT_BAYER_GBRG = 844650584
    PIXEL_FORMAT_BAYER_GRBG = 861427800
    PIXEL_FORMAT_BAYER_RGGB = 878205016
    PIXEL_FORMAT_BE_BAYER16_BGGR = 826360386
    PIXEL_FORMAT_BE_BAYER16_GBRG = 843137602
    PIXEL_FORMAT_BE_BAYER16_GRBG = 859914818
    PIXEL_FORMAT_BE_BAYER16_RGGB = 876692034
    PIXEL_FORMAT_LE_BAYER16_BGGR = 826360396
    PIXEL_FORMAT_LE_BAYER16_GBRG = 843137612
    PIXEL_FORMAT_LE_BAYER16_GRBG = 859914828
    PIXEL_FORMAT_LE_BAYER16_RGGB = 876692044
    PIXEL_FORMAT_MJPEG = 1196444237
    PIXEL_FORMAT_BE_GRAY16 = 357
    PIXEL_FORMAT_LE_GRAY16 = 909199180
    PIXEL_FORMAT_BE_RGB16 = 358
    PIXEL_FORMAT_LE_RGB16 = 1279412050
    PIXEL_FORMAT_BE_SIGNED_GRAY16 = 359
    PIXEL_FORMAT_BE_SIGNED_RGB16 = 360
    PIXEL_FORMAT_FLOAT_GRAY32 = 842221382
    PIXEL_FORMAT_INVALID = -2
    PIXEL_FORMAT_ANY = -1

    def __init__(self):
        self.publisher = ""
        self.cam1_timestamp = 0.0
        self.cam2_timestamp = 0.0
        self.left_utime = 0
        self.right_utime = 0
        self.sequence = 0
        self.camera_orientation = 0
        self.width = 0
        self.height = 0
        self.row_stride = 0
        self.pixelformat = 0
        self.size = 0
        self.data = ""

    def encode(self):
        buf = BytesIO()
        buf.write(stereo_image_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __publisher_encoded = self.publisher.encode('utf-8')
        buf.write(struct.pack('>I', len(__publisher_encoded)+1))
        buf.write(__publisher_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">ddqqqiiiiii", self.cam1_timestamp, self.cam2_timestamp, self.left_utime, self.right_utime, self.sequence, self.camera_orientation, self.width, self.height, self.row_stride, self.pixelformat, self.size))
        buf.write(bytearray(self.data[:self.size]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != stereo_image_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return stereo_image_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = stereo_image_t()
        __publisher_len = struct.unpack('>I', buf.read(4))[0]
        self.publisher = buf.read(__publisher_len)[:-1].decode('utf-8', 'replace')
        self.cam1_timestamp, self.cam2_timestamp, self.left_utime, self.right_utime, self.sequence, self.camera_orientation, self.width, self.height, self.row_stride, self.pixelformat, self.size = struct.unpack(">ddqqqiiiiii", buf.read(64))
        self.data = buf.read(self.size)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if stereo_image_t in parents: return 0
        tmphash = (0xfd5186f91b301327) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if stereo_image_t._packed_fingerprint is None:
            stereo_image_t._packed_fingerprint = struct.pack(">Q", stereo_image_t._get_hash_recursive([]))
        return stereo_image_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

