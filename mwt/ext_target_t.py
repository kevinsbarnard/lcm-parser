"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mwt.header_t


class ext_target_t(object):
    __slots__ = ["header", "left_utime", "right_utime", "left_class_name", "right_class_name", "left_x", "left_y",
                 "right_x", "right_y", "left_box_width", "left_box_height", "right_box_width", "right_box_height",
                 "conf_left", "conf_right", "source"]

    def __init__(self):
        self.header = mwt.header_t()
        self.left_utime = 0
        self.right_utime = 0
        self.left_class_name = ""
        self.right_class_name = ""
        self.left_x = 0.0
        self.left_y = 0.0
        self.right_x = 0.0
        self.right_y = 0.0
        self.left_box_width = 0.0
        self.left_box_height = 0.0
        self.right_box_width = 0.0
        self.right_box_height = 0.0
        self.conf_left = 0.0
        self.conf_right = 0.0
        self.source = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(ext_target_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == mwt.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">qq", self.left_utime, self.right_utime))
        __left_class_name_encoded = self.left_class_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__left_class_name_encoded) + 1))
        buf.write(__left_class_name_encoded)
        buf.write(b"\0")
        __right_class_name_encoded = self.right_class_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__right_class_name_encoded) + 1))
        buf.write(__right_class_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">ddddddddddd", self.left_x, self.left_y, self.right_x, self.right_y, self.left_box_width,
                              self.left_box_height, self.right_box_width, self.right_box_height, self.conf_left,
                              self.conf_right, self.source))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ext_target_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ext_target_t._decode_one(buf)

    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ext_target_t()
        self.header = mwt.header_t._decode_one(buf)
        self.left_utime, self.right_utime = struct.unpack(">qq", buf.read(16))
        __left_class_name_len = struct.unpack('>I', buf.read(4))[0]
        self.left_class_name = buf.read(__left_class_name_len)[:-1].decode('utf-8', 'replace')
        __right_class_name_len = struct.unpack('>I', buf.read(4))[0]
        self.right_class_name = buf.read(__right_class_name_len)[:-1].decode('utf-8', 'replace')
        self.left_x, self.left_y, self.right_x, self.right_y, self.left_box_width, self.left_box_height, self.right_box_width, self.right_box_height, self.conf_left, self.conf_right, self.source = struct.unpack(
            ">ddddddddddd", buf.read(88))
        return self

    _decode_one = staticmethod(_decode_one)

    _hash = None

    def _get_hash_recursive(parents):
        if ext_target_t in parents: return 0
        newparents = parents + [ext_target_t]
        tmphash = (0x9de6ea0e2b79acb9 + mwt.header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash = (((tmphash << 1) & 0xffffffffffffffff) + (tmphash >> 63)) & 0xffffffffffffffff
        return tmphash

    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ext_target_t._packed_fingerprint is None:
            ext_target_t._packed_fingerprint = struct.pack(">Q", ext_target_t._get_hash_recursive([]))
        return ext_target_t._packed_fingerprint

    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)
