"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mwt.header_t

class attitude_t(object):
    __slots__ = ["header", "roll_deg", "pitch_deg", "yaw_deg"]

    __typenames__ = ["mwt.header_t", "double", "double", "double"]

    __dimensions__ = [None, None, None, None]

    def __init__(self):
        self.header = mwt.header_t()
        self.roll_deg = 0.0
        self.pitch_deg = 0.0
        self.yaw_deg = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(attitude_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == mwt.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">ddd", self.roll_deg, self.pitch_deg, self.yaw_deg))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != attitude_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return attitude_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = attitude_t()
        self.header = mwt.header_t._decode_one(buf)
        self.roll_deg, self.pitch_deg, self.yaw_deg = struct.unpack(">ddd", buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if attitude_t in parents: return 0
        newparents = parents + [attitude_t]
        tmphash = (0x9f02cf94eb7c49f0+ mwt.header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if attitude_t._packed_fingerprint is None:
            attitude_t._packed_fingerprint = struct.pack(">Q", attitude_t._get_hash_recursive([]))
        return attitude_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

