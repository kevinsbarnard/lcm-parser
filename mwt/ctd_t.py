"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mwt.header_t

class ctd_t(object):
    __slots__ = ["header", "conductivity_sm", "temperature_degc", "depth_m", "salinity_psu", "oxygen_um", "oxygen_raw"]

    __typenames__ = ["mwt.header_t", "double", "double", "double", "double", "double", "double"]

    __dimensions__ = [None, None, None, None, None, None, None]

    def __init__(self):
        self.header = mwt.header_t()
        self.conductivity_sm = 0.0
        self.temperature_degc = 0.0
        self.depth_m = 0.0
        self.salinity_psu = 0.0
        self.oxygen_um = 0.0
        self.oxygen_raw = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(ctd_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == mwt.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">dddddd", self.conductivity_sm, self.temperature_degc, self.depth_m, self.salinity_psu, self.oxygen_um, self.oxygen_raw))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ctd_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ctd_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ctd_t()
        self.header = mwt.header_t._decode_one(buf)
        self.conductivity_sm, self.temperature_degc, self.depth_m, self.salinity_psu, self.oxygen_um, self.oxygen_raw = struct.unpack(">dddddd", buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if ctd_t in parents: return 0
        newparents = parents + [ctd_t]
        tmphash = (0x97db0a2168bd0a74 + mwt.header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ctd_t._packed_fingerprint is None:
            ctd_t._packed_fingerprint = struct.pack(">Q", ctd_t._get_hash_recursive([]))
        return ctd_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", ctd_t._get_packed_fingerprint())[0]

