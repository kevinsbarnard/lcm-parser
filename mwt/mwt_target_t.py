"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mwt.header_t


class mwt_target_t(object):
    __slots__ = ["header", "range_meters", "bearing_degrees", "z_meters", "range_valid", "bearing_valid", "z_valid",
                 "left_pix_x", "left_pix_y", "right_pix_x", "right_pix_y"]

    def __init__(self):
        self.header = mwt.header_t()
        self.range_meters = 0.0
        self.bearing_degrees = 0.0
        self.z_meters = 0.0
        self.range_valid = False
        self.bearing_valid = False
        self.z_valid = False
        self.left_pix_x = 0.0
        self.left_pix_y = 0.0
        self.right_pix_x = 0.0
        self.right_pix_y = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(mwt_target_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == mwt.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">dddbbbdddd", self.range_meters, self.bearing_degrees, self.z_meters, self.range_valid,
                              self.bearing_valid, self.z_valid, self.left_pix_x, self.left_pix_y, self.right_pix_x,
                              self.right_pix_y))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != mwt_target_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return mwt_target_t._decode_one(buf)

    decode = staticmethod(decode)

    def _decode_one(buf):
        self = mwt_target_t()
        self.header = mwt.header_t._decode_one(buf)
        self.range_meters, self.bearing_degrees, self.z_meters = struct.unpack(">ddd", buf.read(24))
        self.range_valid = bool(struct.unpack('b', buf.read(1))[0])
        self.bearing_valid = bool(struct.unpack('b', buf.read(1))[0])
        self.z_valid = bool(struct.unpack('b', buf.read(1))[0])
        self.left_pix_x, self.left_pix_y, self.right_pix_x, self.right_pix_y = struct.unpack(">dddd", buf.read(32))
        return self

    _decode_one = staticmethod(_decode_one)

    _hash = None

    def _get_hash_recursive(parents):
        if mwt_target_t in parents: return 0
        newparents = parents + [mwt_target_t]
        tmphash = (0xa8d333e2c0719be0 + mwt.header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash = (((tmphash << 1) & 0xffffffffffffffff) + (tmphash >> 63)) & 0xffffffffffffffff
        return tmphash

    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if mwt_target_t._packed_fingerprint is None:
            mwt_target_t._packed_fingerprint = struct.pack(">Q", mwt_target_t._get_hash_recursive([]))
        return mwt_target_t._packed_fingerprint

    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)
