"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mwt.header_t

class clump_status_t(object):
    __slots__ = ["header", "heading_deg", "turns", "depth_m", "altitude_m", "delta_m", "oxygen_um", "analog_1", "autohead_sp_deg", "autohead_enable", "camera_tilt_deg"]

    __typenames__ = ["mwt.header_t", "double", "double", "double", "double", "double", "double", "double", "double", "boolean", "double"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.header = mwt.header_t()
        self.heading_deg = 0.0
        self.turns = 0.0
        self.depth_m = 0.0
        self.altitude_m = 0.0
        self.delta_m = 0.0
        self.oxygen_um = 0.0
        self.analog_1 = 0.0
        self.autohead_sp_deg = 0.0
        self.autohead_enable = False
        self.camera_tilt_deg = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(clump_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == mwt.header_t._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">ddddddddbd", self.heading_deg, self.turns, self.depth_m, self.altitude_m, self.delta_m, self.oxygen_um, self.analog_1, self.autohead_sp_deg, self.autohead_enable, self.camera_tilt_deg))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != clump_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return clump_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = clump_status_t()
        self.header = mwt.header_t._decode_one(buf)
        self.heading_deg, self.turns, self.depth_m, self.altitude_m, self.delta_m, self.oxygen_um, self.analog_1, self.autohead_sp_deg = struct.unpack(">dddddddd", buf.read(64))
        self.autohead_enable = bool(struct.unpack('b', buf.read(1))[0])
        self.camera_tilt_deg = struct.unpack(">d", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if clump_status_t in parents: return 0
        newparents = parents + [clump_status_t]
        tmphash = (0x9dc3009e59c16737 + mwt.header_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if clump_status_t._packed_fingerprint is None:
            clump_status_t._packed_fingerprint = struct.pack(">Q", clump_status_t._get_hash_recursive([]))
        return clump_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", clump_status_t._get_packed_fingerprint())[0]

