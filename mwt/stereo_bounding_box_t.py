"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import mwt.bounding_box_list_t

class stereo_bounding_box_t(object):
    __slots__ = ["publisher", "left_boxes", "right_boxes"]

    def __init__(self):
        self.publisher = ""
        self.left_boxes = mwt.bounding_box_list_t()
        self.right_boxes = mwt.bounding_box_list_t()

    def encode(self):
        buf = BytesIO()
        buf.write(stereo_bounding_box_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        __publisher_encoded = self.publisher.encode('utf-8')
        buf.write(struct.pack('>I', len(__publisher_encoded)+1))
        buf.write(__publisher_encoded)
        buf.write(b"\0")
        assert self.left_boxes._get_packed_fingerprint() == mwt.bounding_box_list_t._get_packed_fingerprint()
        self.left_boxes._encode_one(buf)
        assert self.right_boxes._get_packed_fingerprint() == mwt.bounding_box_list_t._get_packed_fingerprint()
        self.right_boxes._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != stereo_bounding_box_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return stereo_bounding_box_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = stereo_bounding_box_t()
        __publisher_len = struct.unpack('>I', buf.read(4))[0]
        self.publisher = buf.read(__publisher_len)[:-1].decode('utf-8', 'replace')
        self.left_boxes = mwt.bounding_box_list_t._decode_one(buf)
        self.right_boxes = mwt.bounding_box_list_t._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if stereo_bounding_box_t in parents: return 0
        newparents = parents + [stereo_bounding_box_t]
        tmphash = (0x469f948d1ed6a0f1+ mwt.bounding_box_list_t._get_hash_recursive(newparents)+ mwt.bounding_box_list_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if stereo_bounding_box_t._packed_fingerprint is None:
            stereo_bounding_box_t._packed_fingerprint = struct.pack(">Q", stereo_bounding_box_t._get_hash_recursive([]))
        return stereo_bounding_box_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

